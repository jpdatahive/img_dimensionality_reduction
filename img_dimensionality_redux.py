import marimo

__generated_with = "0.6.26"
app = marimo.App(width="medium", app_title="Image Dimensionality Redux")


@app.cell(hide_code=True)
def __():
    import marimo as mo

    mo.md("""# Redu√ß√£o de dimensionalidade de imagens üñºÔ∏è
            ## Uma abordagem para utiliza√ß√£o em *Redes Neurais* üß†""")
    return mo,


@app.cell(hide_code=True)
def __(mo):
    mo.md(
        """
    Redu√ß√£o de dimensionalidade se refere a t√©cnicas que s√£o utilizadas para a redu√ß√£o do n√∫mero de vari√°veis a serem consideradas em um determinado conjunto de dados, isso simplifica os dados enquanto ret√©m o m√°ximo poss√≠vel da informa√ß√£o relevante.


        """
    ).callout()
    return


@app.cell(hide_code=True)
def __(mo):
    mo.md(
        """
        No projeto a seguir, vamos ver como funciona a redu√ß√£o de dimensionalidade em imagens para a utiliza√ß√£o em redes neurais, este √© um exemplo simples, com a finalidade apenas de refor√ßar a minha compreens√£o de como a redu√ß√£o de dimensionalidade pode ser utilizada em um determinado contexto.

        Mas antes vamos entender como funciona uma imagem.

        Uma imagem digital pode ser entendida como uma matriz, onde cada elemento dessa matriz representa um pixel. Aqui est√° uma explica√ß√£o simples da estrutura de uma imagem em matriz:

        - Pixel: Um pixel √© a menor unidade de uma imagem digital. Ele cont√©m informa√ß√µes sobre a cor e, em imagens em tons de cinza, tamb√©m sobre a intensidade.

        - Coordenadas: Cada pixel em uma imagem tem coordenadas associadas que indicam sua posi√ß√£o na matriz. Essas coordenadas geralmente s√£o representadas por pares ordenados, como (linha, coluna).

        - Canais de Cor: Para imagens coloridas, cada pixel pode ter v√°rios canais de cor, como vermelho, verde e azul (RGB), ou matiz, satura√ß√£o e luminosidade (HSL), dependendo do modelo de cor. Cada canal possui um valor que determina a intensidade daquela cor espec√≠fica no pixel.

        - Formato da Matriz: A imagem √© representada como uma matriz bidimensional para imagens em tons de cinza ou uma matriz tridimensional para imagens coloridas.

        Para imagens em tons de cinza, cada elemento da matriz √© um n√∫mero que representa a intensidade do pixel (geralmente variando de 0 a 255).
        Para imagens coloridas, cada elemento da matriz √© um vetor que cont√©m os valores dos canais de cor para aquele pixel.
        Resolu√ß√£o: A resolu√ß√£o de uma imagem (por exemplo, 800x600 pixels) indica o n√∫mero de linhas e colunas da matriz, determinando assim a quantidade de detalhes que a imagem pode conter.

        ### Exemplo Simples:
        Imagine uma imagem em tons de cinza com resolu√ß√£o de 3x3 pixels:

        ```
         img = [[120, 150, 200],
               [100, 130, 180],
               [80, 110, 160]]
        ```

        ### Neste exemplo:

        A matriz √© 3x3, ou seja, tem 3 linhas e 3 colunas.
        Cada n√∫mero representa a intensidade do pixel naquela posi√ß√£o. Por exemplo, o pixel na primeira linha e segunda coluna tem intensidade 150.
        Para imagens coloridas, a matriz seria tridimensional, onde cada elemento √© um vetor com tr√™s valores (R, G, B) ou equivalentes, dependendo do modelo de cor utilizado.

        Em resumo, a estrutura em matriz proporciona uma forma organizada e sistem√°tica de representar e manipular dados de imagens digitais, facilitando opera√ß√µes como processamento de imagem, an√°lise de conte√∫do e reconhecimento de padr√µes.
        """
    )
    return


@app.cell
def __():
    # Carregamento das bibliotecas necess√°rias
    from PIL import Image
    from urllib.request import urlopen
    import matplotlib.pyplot as plt
    import seaborn as sns
    from io import BytesIO
    import base64
    return BytesIO, Image, base64, plt, sns, urlopen


@app.cell(hide_code=True)
def __(mo):
    mo.accordion({
        "## Exemplo Pr√°tico":
        """Em um conjunto de dados, voc√™ tem dezenas de colunas com milhares de linhas contendo caracter√≠sticas de carros usados. Imagine que, para o seu projeto em quest√£o, essa quantidade de colunas e linhas seja demais para o seu poder de processamento. Podemos ent√£o usar duas colunas, como a de **ano de fabrica√ß√£o** e **km rodados** do carro, para criar um valor que consiga representar ambas as informa√ß√µes de alguma forma. Reduzimos ent√£o essas duas colunas a uma s√≥ com um *score* que consiga uma combina√ß√£o dessas duas informa√ß√µes, j√° que carros mais antigos geralmente possuem uma quilometragem maior (isso pode ser aplicado a quaisquer vari√°veis que estejam de alguma forma relacionadas). Chamamos isso de redu√ß√£o de dimensionalidade e ainda *feature engineering*, pois criamos uma caracter√≠stica nova atrav√©s de outras."""
    })
    return


@app.cell
def __(mo):
    mo.accordion({
        "## Redu√ß√£o de Dimensionalidade em Imagens":
        """Em imagens, essa redu√ß√£o √© especialmente importante devido √† alta dimensionalidade junta aos dados visuais. Uma imagem nada mais √© que uma matriz de informa√ß√µes divididas basicamente em altura, largura e 3 faixas de cores diferentes.

        Vejamos ent√£o uma imagem colorida com um tamanho de 1024x1024 pixels. Ela possui 3.145.728 dimens√µes (1024 * 1024 * 3 canais de cor (RGB ou Red, Green e Blue)).

        O desempenho computacional para processar diretamente essas imagens de alta resolu√ß√£o √© extremamente caro e ineficiente. Essas imagens tamb√©m possuem uma quantidade de ru√≠do que √© indesejada, nos deixando mais distantes das caracter√≠sticas mais significativas para nossas an√°lises.

        Podemos, no entanto, usar a redu√ß√£o de dimensionalidade para reduzir todas as informa√ß√µes que n√£o s√£o necessariamente desejadas (de acordo com nossa necessidade) para o desenvolvimento de an√°lises. Verifiquemos os exemplos a seguir."""
    })
    return


@app.cell
def __(Image, urlopen):
    # Fun√ß√£o para a convers√£o para a escala de cinza
    def escala_cinza(url_img_colorida):
        # Carrega a imagem original (colorida)
        im = Image.open(urlopen(url_img_colorida))
        # Converte a imagem para cinza
        img_cinza = im.convert("L")

        return img_cinza


    # Fun√ß√£o para a convers√£o numa escala bin√°ria
    def escala_binaria(img_cinza, limiar=128):

        # Aplica a convers√£o para a escala bin√°ria
        img_binaria = img_cinza.point(lambda p: p > limiar and 255)

        return img_binaria
    return escala_binaria, escala_cinza


@app.cell
def __(Image, escala_binaria, escala_cinza, urlopen):
    # Imagem da cachorra Laika - m√°rtir canina, v√≠tima de nossa ambi√ß√£o
    laika_dir = "https://upload.wikimedia.org/wikipedia/pt/b/be/Laika_%28cadela%29.jpg"

    # Carregando a imagem da Laika diretamente do link (colorida)
    laika_cor = Image.open(urlopen(laika_dir))

    # Convertendo a Laika para uma escala de cinza
    laika_cinza = escala_cinza(laika_dir)

    # Convertendo a Laika em escala cinza para uma escala bin√°ria
    laika_binaria = escala_binaria(laika_cinza, limiar=128)
    return laika_binaria, laika_cinza, laika_cor, laika_dir


@app.cell(hide_code=True)
def __(mo):
    mo.md("## Considere as imagens da Laika a seguir:")
    return


@app.cell(hide_code=True)
def __(BytesIO, laika_binaria, laika_cinza, laika_cor, mo, plt, sns):
    # Configura√ß√µes de estilo do Seaborn
    sns.set(style="whitegrid", palette="pastel")

    # Criar a figura e os subplots
    _fig, _axs = plt.subplots(1, 3, figsize=(15, 5))

    # Plotar no primeiro subplot
    _axs[0].imshow(laika_cor)
    _axs[0].set_title("Imagem da Laika colorida", fontsize=14)
    _axs[0].axis("off")

    # Plotar no segundo subplot
    _axs[1].imshow(laika_cinza, cmap="gray")
    _axs[1].set_title("Laika em escala de cinza", fontsize=14)
    _axs[1].axis("off")

    # Plotar no terceiro subplot
    _axs[2].imshow(laika_binaria, cmap="gray")
    _axs[2].set_title("Laika em escala bin√°ria", fontsize=14)
    _axs[2].axis("off")

    # Ajustar automaticamente o espa√ßamento entre os subplots
    plt.tight_layout()

    # Salvar a figura em BytesIO
    _buffer = BytesIO()
    plt.savefig(_buffer, format='png')
    _buffer.seek(0)

    _img_bytes = _buffer.getvalue()

    mo.image(_img_bytes)
    return


@app.cell(hide_code=True)
def __(mo):
    mo.md(
        """
        Se quisermos identificar qual animal est√° presente na imagem, podemos dizer com clareza que n√£o precisamos da cor pra identificar que se trata de um cachorro, como dito anteriormente, o computador teria ent√£o uma "percep√ß√£o" da imagem com um n√∫mero muito grande de dimens√µes, as quais n√£o s√£o necess√°rias para a identifica√ß√£o do animal da foto, portanto, nesse caso, podemos reduzir as dimens√µes da imagem para que o volume de informa√ß√µes que o computador precise analisar seja muito menor, poupando muito poder de processamento e ao mesmo tempo, "apontando" para as caracter√≠sticas que mais importam nesse caso.


        Em outros casos, como os de identifica√ß√£o de esp√©cie de flores, por exemplo, as cores t√™m uma import√¢ncia significativa, pois fazem parte das caracter√≠sticas que as definem, portanto, √© necess√°rio entender quais caracter√≠sticas s√£o essenciais para isso.

        Vamos testar agora com uma imagem de sua escolha.
        """
    )
    return


@app.cell
def __(mo):
    img_url = mo.ui.text(kind="text",
                        label="Insira o link de uma imagem jpeg")

    img_url.callout()
    return img_url,


@app.cell
def __(Image, escala_binaria, escala_cinza, img_url, urlopen):
    try:
        # Abrir a imagem a partir da URL fornecida pelo usu√°rio
        with urlopen(img_url.value) as response:
            img_input_cor = Image.open(response)

            img_input_cinza = escala_cinza(img_url.value)

            img_input_binaria = escala_binaria(img_input_cinza)
    except Exception as e:
        print(f"Erro ao processar a imagem: {e}")
    return img_input_binaria, img_input_cinza, img_input_cor, response


@app.cell
def __(
    BytesIO,
    img_input_binaria,
    img_input_cinza,
    img_input_cor,
    mo,
    plt,
    sns,
):
    # Configura√ß√µes de estilo do Seaborn
    sns.set(style="whitegrid", palette="pastel")

    # Criar a figura e os subplots
    _fig, _axs = plt.subplots(1, 3, figsize=(15, 5))

    # Plotar no primeiro subplot
    _axs[0].imshow(img_input_cor)
    _axs[0].set_title("Imagem colorida", fontsize=14)
    _axs[0].axis("off")

    # Plotar no segundo subplot
    _axs[1].imshow(img_input_cinza, cmap="gray")
    _axs[1].set_title("Imagem em escala de cinza", fontsize=14)
    _axs[1].axis("off")

    # Plotar no terceiro subplot
    _axs[2].imshow(img_input_binaria, cmap="gray")
    _axs[2].set_title("Imagem em escala bin√°ria", fontsize=14)
    _axs[2].axis("off")

    # Ajustar automaticamente o espa√ßamento entre os subplots
    plt.tight_layout()

    # Salvar a figura em BytesIO
    _buffer = BytesIO()
    plt.savefig(_buffer, format='png')
    _buffer.seek(0)

    _img_bytes = _buffer.getvalue()

    mo.image(_img_bytes)
    return


@app.cell
def __(mo):
    mo.md(""""Aqui, utilizamos a biblioteca Pillow para a redu√ß√£o de dimensionalidade de imagens para o usuo em *redes neurais*.

    Este √© um exemplo extremamente simples, apenas para o exerc√≠cio do entendimento do conceito, visto que n√£o utilizaremos bibliotecas que j√° s√£o amplamente utilizadas para o pr√©-processamento de imagens - como OpenCV e outras. 

    Neste exemplo pr√°tico, utilizamos a biblioteca Pillow para reduzir uma imagem colorida para uma escala de cinza, e posteriormente, uma escala bin√°ria (apenas preto e branco).""")
    return


@app.cell
def __():
    return


if __name__ == "__main__":
    app.run()
